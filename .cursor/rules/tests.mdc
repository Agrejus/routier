---
description: 
globs: *.test.*
alwaysApply: false
---

# Test Generation Rules

## Core Requirements

- **Generate comprehensive tests** covering typical cases, edge cases, and error conditions
- **Test file location**: Place test files next to the source files (e.g., `user.ts` â†’ `user.test.ts`)
- **File naming**: Use `.test.ts` extension for test files

## Test Structure & Organization

- Use `describe` blocks for classes/modules
- Use `context` blocks for different scenarios
- Use `it` blocks for individual test cases
- Follow AAA pattern (Arrange-Act-Assert) in every test
- Ensure every test has at least one `expect()` statement

## Test Content Guidelines

- **No comments** - especially avoid arrange/act/assert comments
- **Clear naming**: Use descriptive names for describe/context/it blocks
- **Prefer `expect` syntax** over other assertion methods
- **Test independence**: Each test must be isolated with no shared state
- **Cleanup**: Restore mocks, clear mocks, clean up side-effects

## Mocking Strategy

- When using `jest.mock(...)`, if applicable, wrap mocked imports with `jest.mocked(...)` for proper type safety
  - Example:
  ```
  jest.mock('./api');
  import { fetchData } from './api';
  const mockedFetchData = jest.mocked(fetchData);
  ```
- **Mock external services** (APIs, databases) to isolate units
- **Avoid over-mocking** - test real behavior when possible
- **Use stubs** for predefined return values

## Test Data

- **Search codebase first** for existing factories
- **Prefer factories** over fixtures for test data creation
- **Avoid repetition** - use shared examples and helpers

## Development Process

1. **Write one test first** and confirm it's correct
2. **Run tests** to ensure they pass before proceeding
3. **Don't write tests to pass** - confirm logic is correct first
4. **If test fails**, verify the underlying logic before fixing the test

## Quality Standards

- Tests must be **comprehensive** (cover all scenarios)
- Tests must be **readable** (clear, descriptive names)
- Tests must be **maintainable** (no duplication, logical organization)
- Tests must be **independent** (no shared state between tests)
